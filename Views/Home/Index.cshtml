@model IEnumerable<weatherSolutions.Models.city>

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Earth Flow</title>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    <!-- Bootstrap CSS v5.2.1 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Highcharts -->
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="./index.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js"></script>
    <!-- Material Design Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/3.6.95/css/materialdesignicons.css" rel="stylesheet">
    <!-- Your custom stylesheet -->
    <link href="~/css/stylesheet.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header>
        <!-- Navbar -->
    </header>
    <main>
        <section class="topSection">
            <section class="weeklyCharts">
                <div class="container-fluid">
                    <div class="row">
                        <div class="d-flex">
                            <h3 class="form-group col-md-8" id="cityNameHeader">Loading...</h3>
                           
                             <div class="form-group col-md-offset-3 col-md-4">
                                  <a asp-action="SearchCity" class="btn btn-primary">Search City</a>
                              </div>
                          
                        </div>
                       
                        </br>
                        <div class="col col-lg-12 col-12">
                            <!-- Chart container for weekly overview -->
                            <figure class="highcharts-figure weeklyOverviewChart">
                                <div id="weeklyOverviewChartContainer"></div>
                            </figure>
                        </div>
                    </div>
                </div>
            </section>
        </section>

        <section class="weeklyCharts">
            <div class="container-fluid">
                <div class="row">

                    <div class="col col-lg-6 col-12">
                        <!-- Chart container for humidity -->
                        <figure class="highcharts-figure humidityChart">
                            <div id="humidityChartContainer"></div>
                        </figure>
                    </div>
                    <div class="col col-lg-6 col-12">
                        <!-- Chart container for temperature -->
                        <figure class="highcharts-figure temperatureChart">
                            <div id="temperatureChartContainer"></div>
                        </figure>
                    </div>
                   
                    <!-- Add more chart containers for other metrics -->
                </div>
            </div>
        </section>

    </main>

    <h3>History Searches</h3>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.CityName)</th>
                <th>@Html.DisplayNameFor(model => model.Temperature)</th>
                <th>@Html.DisplayNameFor(model => model.Temp_FeelsLike)</th>
                <th>@Html.DisplayNameFor(model => model.MinTemp)</th>
                <th>@Html.DisplayNameFor(model => model.MaxTemp)</th>
                <th>@Html.DisplayNameFor(model => model.Humidity)</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th>
                <th>@Html.DisplayNameFor(model => model.Latitude)</th>
                <th>@Html.DisplayNameFor(model => model.Longitude)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.CityName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Temperature)</td>
                    <td>@Html.DisplayFor(modelItem => item.Temp_FeelsLike)</td>
                    <td>@Html.DisplayFor(modelItem => item.MinTemp)</td>
                    <td>@Html.DisplayFor(modelItem => item.MaxTemp)</td>
                    <td>@Html.DisplayFor(modelItem => item.Humidity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                    <td>@Html.DisplayFor(modelItem => item.Latitude)</td>
                    <td>@Html.DisplayFor(modelItem => item.Longitude)</td>
                    <td>
                       @*  <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> | *@
                        <a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <script>
        // Fetch weather data for current location
        function getCurrentLocationWeather() {
            if (navigator.geolocation) {
                // Prompt user for location permission
                navigator.geolocation.getCurrentPosition(
                    fetchWeatherData,
                    handleLocationError,
                    { enableHighAccuracy: true }
                );
            } else {
                console.log("Geolocation is not supported by this browser.");
            }
        }

        // Handle location permission error
        function handleLocationError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    console.log("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    console.log("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    console.log("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    console.log("An unknown error occurred.");
                    break;
            }
        }

        // Fetch weather data from OpenWeather API
        function fetchWeatherData(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const apiKey = 'bbfbf8df917e1b80b851469c8512b86a';
            const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    // Process the fetched data and update the charts
                    updateCharts(data);
                })
                .catch(error => {
                    console.error('Error fetching weather data:', error);
                });
        }

        // Update the charts with the fetched weather data
        function updateCharts(data) {
            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

            // Extract data for each day (today + next 6 days)
            const dailyData = data.list.filter((item, index) => index % 8 === 0); // Filter to get data for every 24 hours

            const categories = dailyData.map(item => {
                const date = new Date(item.dt * 1000);
                return days[date.getDay()];
            });
            // Update the city name in the header
            document.getElementById('cityNameHeader').textContent = `Current Weekly Forecast for ${data.city.name}`;

            const temperatureData = dailyData.map(item => item.main.temp);
            const humidityData = dailyData.map(item => item.main.humidity);
            const feelsLikeData = dailyData.map(item => item.main.feels_like);
            const minTempData = dailyData.map(item => item.main.temp_min);
            const maxTempData = dailyData.map(item => item.main.temp_max);

            // Update weekly overview chart
            Highcharts.chart('weeklyOverviewChartContainer', {
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Weekly Overview'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Metric'
                    }
                },
                series: [{
                    name: 'Temperature',
                    data: temperatureData
                }, {
                    name: 'Humidity',
                    data: humidityData
                }, {
                    name: 'Feels Like',
                    data: feelsLikeData
                }, {
                    name: 'Min Temperature',
                    data: minTempData
                }, {
                    name: 'Max Temperature',
                    data: maxTempData
                }]
            });

            // Update humidity chart
            Highcharts.chart('humidityChartContainer', {
                chart: {
                    type: 'line'
                },
                title: {
                    text: 'Weekly Humidity'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Humidity (%)'
                    }
                },
                series: [{
                    name: 'Humidity',
                    data: humidityData
                }]
            });

            // Update temperature chart
            Highcharts.chart('temperatureChartContainer', {
                chart: {
                    type: 'line'
                },
                title: {
                    text: 'Weekly Temperature'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Temperature (°C)'
                    }
                },
                series: [{
                    name: 'Temperature',
                    data: temperatureData
                }]
            });

           
        }

        // Fetch weather data for current location when the page loads
        window.addEventListener('load', getCurrentLocationWeather);

    </script>
</body>

</html>
