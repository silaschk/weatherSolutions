@model IEnumerable<weatherSolutions.Models.city>

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Earth Flow</title>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    <!-- Bootstrap CSS v5.2.1 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Highcharts -->
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="./index.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js"></script>
    <!-- Material Design Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/3.6.95/css/materialdesignicons.css" rel="stylesheet">
    <!-- Your custom stylesheet -->
    <link href="~/css/stylesheet.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header>
        <!-- Navbar -->
    </header>
    <main>
        <section class="topSection">
            <section class="weeklyCharts">
                <div class="container-fluid">
                    <div class="row">
                        <div class="d-flex">
                            <h3 class="form-group col-md-8" id="cityNameHeader">Loading...</h3>
                           
                             <div class="form-group col-md-offset-3 col-md-4">
                                  <a asp-action="SearchCity" class="btn btn-primary">Search City</a>
                              </div>
                          
                        </div>
                       
                        </br>
                        <div class="col col-lg-12 col-12">
                            <!-- Chart container for weekly overview -->
                            <figure class="highcharts-figure weeklyOverviewChart">
                                <div id="weeklyOverviewChartContainer"></div>
                            </figure>
                        </div>
                    </div>
                </div>
            </section>
        </section>

        <section class="weeklyCharts">
            <div class="container-fluid">
                <div class="row">

                    <div class="col col-lg-6 col-12">
                        <!-- Chart container for humidity -->
                        <figure class="highcharts-figure humidityChart">
                            <div id="humidityChartContainer"></div>
                        </figure>
                    </div>
                    <div class="col col-lg-6 col-12">
                        <!-- Chart container for temperature -->
                        <figure class="highcharts-figure temperatureChart">
                            <div id="temperatureChartContainer"></div>
                        </figure>
                    </div>
                   
                    <!-- Add more chart containers for other metrics -->
                </div>
            </div>
        </section>

    </main>

    <h3>History Searches</h3>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.CityName)</th>
                <th>@Html.DisplayNameFor(model => model.Temperature)</th>
                <th>@Html.DisplayNameFor(model => model.Temp_FeelsLike)</th>
                <th>@Html.DisplayNameFor(model => model.MinTemp)</th>
                <th>@Html.DisplayNameFor(model => model.MaxTemp)</th>
                <th>@Html.DisplayNameFor(model => model.Humidity)</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th>
                <th>@Html.DisplayNameFor(model => model.Latitude)</th>
                <th>@Html.DisplayNameFor(model => model.Longitude)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.CityName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Temperature)</td>
                    <td>@Html.DisplayFor(modelItem => item.Temp_FeelsLike)</td>
                    <td>@Html.DisplayFor(modelItem => item.MinTemp)</td>
                    <td>@Html.DisplayFor(modelItem => item.MaxTemp)</td>
                    <td>@Html.DisplayFor(modelItem => item.Humidity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                    <td>@Html.DisplayFor(modelItem => item.Latitude)</td>
                    <td>@Html.DisplayFor(modelItem => item.Longitude)</td>
                    <td>
                       @*  <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> | *@
                        <a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <script>
        // Fetch weather data for current location
        function getCurrentLocationWeather() {
            if (navigator.geolocation) {
                // Prompt user for location permission
                navigator.geolocation.getCurrentPosition(
                    fetchWeatherData,
                    handleLocationError,
                    { enableHighAccuracy: true }
                );
            } else {
                console.log("Geolocation is not supported by this browser.");
            }
        }

        // Handle location permission error
        function handleLocationError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    console.log("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    console.log("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    console.log("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    console.log("An unknown error occurred.");
                    break;
            }
        }

        // Fetch weather data from OpenWeather API
        function fetchWeatherData(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const apiKey = 'bbfbf8df917e1b80b851469c8512b86a';
            const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    // Process the fetched data and update the charts
                    updateCharts(data);
                })
                .catch(error => {
                    console.error('Error fetching weather data:', error);
                });
        }

        // Update the charts with the fetched weather data
        function updateCharts(data) {
            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

            // Extract data for each day (today + next 6 days)
            const dailyData = data.list.filter((item, index) => index % 8 === 0); // Filter to get data for every 24 hours

            const categories = dailyData.map(item => {
                const date = new Date(item.dt * 1000);
                return days[date.getDay()];
            });
            // Update the city name in the header
            document.getElementById('cityNameHeader').textContent = `Current Weekly Forecast for ${data.city.name}`;

            const temperatureData = dailyData.map(item => item.main.temp);
            const humidityData = dailyData.map(item => item.main.humidity);
            const feelsLikeData = dailyData.map(item => item.main.feels_like);
            const minTempData = dailyData.map(item => item.main.temp_min);
            const maxTempData = dailyData.map(item => item.main.temp_max);

            // Update weekly overview chart
            Highcharts.chart('weeklyOverviewChartContainer', {
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Weekly Overview'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Metric'
                    }
                },
                series: [{
                    name: 'Temperature',
                    data: temperatureData
                }, {
                    name: 'Humidity',
                    data: humidityData
                }, {
                    name: 'Feels Like',
                    data: feelsLikeData
                }, {
                    name: 'Min Temperature',
                    data: minTempData
                }, {
                    name: 'Max Temperature',
                    data: maxTempData
                }]
            });

            // Update humidity chart
            Highcharts.chart('humidityChartContainer', {
                chart: {
                    type: 'line'
                },
                title: {
                    text: 'Weekly Humidity'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Humidity (%)'
                    }
                },
                series: [{
                    name: 'Humidity',
                    data: humidityData
                }]
            });

            // Update temperature chart
            Highcharts.chart('temperatureChartContainer', {
                chart: {
                    type: 'line'
                },
                title: {
                    text: 'Weekly Temperature'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Temperature (°C)'
                    }
                },
                series: [{
                    name: 'Temperature',
                    data: temperatureData
                }]
            });

           
        }

        // Fetch weather data for current location when the page loads
        window.addEventListener('load', getCurrentLocationWeather);

    </script>
</body>

</html>


@* <head>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js"></script>
    <!-- Material Design Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/3.6.95/css/materialdesignicons.css" rel="stylesheet">
    <!-- Your custom stylesheet -->
    <link href="~/css/stylesheet.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>


<div class="container">
<h3>History Searches</h3>
    <div class="form-group col-md-offset-3 col-md-5">
        <a asp-action="SearchCity" class="btn btn-primary">Search City</a>
    </div>
</div>
<div class="container">

    <form method="post">

        <div class="container">
            <div class="form-group col-md-offset-3 col-md-5">
                <h2>Search the forecast in a city</h2>
                <label asp-for="" style="font-family: Arial"></label>
                <input asp-for="" class="form-control" />
                <span asp-validation-for="CityName" class="text-danger"></span>
            </div>
        </div>
        <div class="container">
            <div class="form-group col-md-offset-3 col-md-5">
                <button asp-controller="cities" asp-action="SearchCity" class="btn btn-primary">Search</button>
            </div>
        </div>
    </form>

</div>
<div class="container">
    <div class="form-group col-md-offset-3 col-md-5">
        <button asp-controller="cities" asp-action="SearchCity" class="btn btn-primary">Search</button>
    </div>
</div>
<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>@Html.DisplayNameFor(model => model.CityName)</th>
            <th>@Html.DisplayNameFor(model => model.Temperature)</th>
            <th>@Html.DisplayNameFor(model => model.Temp_FeelsLike)</th>
            <th>@Html.DisplayNameFor(model => model.MinTemp)</th>
            <th>@Html.DisplayNameFor(model => model.MaxTemp)</th>
            <th>@Html.DisplayNameFor(model => model.Humidity)</th>
            <th>@Html.DisplayNameFor(model => model.Description)</th>
            <th>@Html.DisplayNameFor(model => model.Latitude)</th>
            <th>@Html.DisplayNameFor(model => model.Longitude)</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.CityName)</td>
                <td>@Html.DisplayFor(modelItem => item.Temperature)</td>
                <td>@Html.DisplayFor(modelItem => item.Temp_FeelsLike)</td>
                <td>@Html.DisplayFor(modelItem => item.MinTemp)</td>
                <td>@Html.DisplayFor(modelItem => item.MaxTemp)</td>
                <td>@Html.DisplayFor(modelItem => item.Humidity)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.Latitude)</td>
                <td>@Html.DisplayFor(modelItem => item.Longitude)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="page-content page-container" id="page-content">
    <div class="padding">
        <div class="row container d-flex justify-content-center">
            <div class="col-lg-12 grid-margin stretch-card">
                <!--weather card-->
                <div class="card card-weather">                    
                    <div class="card-body p-0">
                        <canvas id="weather-chart" height="200"></canvas>
                    </div>
                </div>
                <!--weather card ends-->
            </div>
        </div>
    </div>
</div>

<script>
    // Function to update the day of the week and date
    function updateDayAndDate() {
        // Get the current date
        var currentDate = new Date();

        // Define an array of day names
        var daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

        // Get the day of the week (0-6) and use it to retrieve the day name from the array
        var dayIndex = currentDate.getDay();
        var dayOfWeek = daysOfWeek[dayIndex];

        // Get the date in the specified format (DD Month, YYYY)
        var dateOptions = { day: 'numeric', month: 'long', year: 'numeric' };
        var formattedDate = currentDate.toLocaleDateString('en-US', dateOptions);

        // Update the content of the <h3> element with the day of the week
        document.getElementById('day-of-week').textContent = dayOfWeek;

        // Update the content of the <span> element with the date
        document.getElementById('date').textContent = formattedDate;
    }

    // Call the function to update the day of the week and date when the page loads
    updateDayAndDate();

    // Get the user's current location
    function getCurrentLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showWeatherData);
        } else {
            console.log("Geolocation is not supported by this browser.");
        }
    }

    // Callback function to handle the retrieved geolocation
    function showWeatherData(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // Call the OpenWeatherMap API to get the weather data
        const apiKey = 'bbfbf8df917e1b80b851469c8512b86a';
        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;

        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                // Update the weather data in the UI
                document.getElementById('location').innerText = data.name;
                document.getElementById('temperature').innerText = `${data.main.temp} °C`;
                document.getElementById('weather-description').innerText = data.weather[0].description;

                // Call function to fetch and display forecast data
                getForecast(latitude, longitude, apiKey);
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    }

    // Function to fetch and display forecast data for the upcoming days
    function getForecast(latitude, longitude, apiKey) {
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;

        fetch(forecastUrl)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                const forecastContainer = document.getElementById('weekly-weather');
                forecastContainer.innerHTML = ''; // Clear previous forecast data

                // Loop through the forecast data for the upcoming days (up to a week)
                for (let i = 0; i < data.list.length; i += 8) { // Step by 8 to get forecast for every day
                    const forecast = data.list[i];
                    const date = new Date(forecast.dt * 1000);
                    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'short' });
                    const temperature = Math.round(forecast.main.temp);
                    const weatherDescription = forecast.weather[0].description;

                    // Create a Bootstrap card for each forecast item
                    const forecastCard = `
                            <div class="col-md-2">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">${dayOfWeek}</h5>
                                        <p class="card-text">${temperature}°C</p>
                                        <p class="card-text">${weatherDescription}</p>
                                    </div>
                                </div>
                            </div>
                        `;
                    forecastContainer.innerHTML += forecastCard;
                }
            })
            .catch(error => {
                console.error('Error fetching forecast data:', error);
            });
    }

    // Call getCurrentLocation function when the page is loaded
    window.addEventListener('load', getCurrentLocation);

    // Function to create weather chart
    function createWeatherChart(labels, data) {
        var ctx = document.getElementById('weather-chart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Temperature (°C)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    data: data,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: false
                        }
                    }]
                }
            }
        });
    }

    // Sample data for weather chart
    var labels = ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5'];
    var data = [20, 25, 22, 18, 23];

    // Call createWeatherChart function to create the chart
    createWeatherChart(labels, data);
</script> *@
