@model weatherSolutions.Models.city

@{
    ViewData["Title"] = "City";
}

<head>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js"></script>
    <!-- Material Design Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/3.6.95/css/materialdesignicons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <!-- Your custom stylesheet -->
    <link href="~/css/stylesheet.css" rel="stylesheet">
</head>

    <div class="form-group col-md-offset-9 col-md-4">
    <a asp-controller="Home" asp-action="index" class="btn btn-info">Return Home</a>
    </div>

<div class="page-content page-container" id="page-content">
    <div class="padding">
        <div class="row container d-flex justify-content-center">
            <div class="col-lg-12 grid-margin stretch-card">
                <!--weather card-->
                <div class="card card-weather">
                    <div class="card-body">
                        <div class="weather-date-location">
                            <div class="weather-date-location">
                                <h3 class="weather-location">@Model.CityName <i class="description-icon" id="description-icon"></i></h3>
                                <p class="text-gray">
                                    <span class="weather-date" id="day-of-week">Loading...</span>
                                    <span class="weather-date" id="date">Loading...</span>
                                </p>
                            </div>
                           
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Latitude:</label>
                            <span>@Model.Latitude</span>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Longitude:</label>
                            <span>@Model.Longitude</span>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Temperature:</label>
                            <span>@Model.Temperature°C</span>
                            <i id="temperature-icon" class="weather-icon"></i>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Description:</label>
                            <span>@Model.Description</span>
                            <i id="description-icon" class="weather-icon"></i>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Humidity:</label>
                            <span>@Model.Humidity %</span>
                            <i id="humidity-icon" class="weather-icon"></i>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Feels Like:</label>
                            <span>@Model.Temp_FeelsLike °C</span>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Min Temperature:</label>
                            <span>@Model.MinTemp °C</span>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Max Temperature:</label>
                            <span>@Model.MaxTemp °C</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="d-flex weakly-weather" id="weekly-weather">
                            <!-- Forecast data for the upcoming days will be added dynamically here -->
                        </div>
                    </div>
                </div>

                <!--weather card ends-->
            </div>
        </div>
    </div>
</div>

<script>
    // Function to update the day of the week and date
    function updateDayAndDate() {
        // Get the current date
        var currentDate = new Date();

        // Define an array of day names
        var daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

        // Get the day of the week (0-6) and use it to retrieve the day name from the array
        var dayIndex = currentDate.getDay();
        var dayOfWeek = daysOfWeek[dayIndex];

        // Get the date in the specified format (DD Month, YYYY)
        var dateOptions = { day: 'numeric', month: 'long', year: 'numeric' };
        var formattedDate = currentDate.toLocaleDateString('en-US', dateOptions);

        // Update the content of the <h3> element with the day of the week
        document.getElementById('day-of-week').textContent = dayOfWeek;

        // Update the content of the <span> element with the date
        document.getElementById('date').textContent = formattedDate;
    }

    // Call the function to update the day of the week and date when the page loads
    updateDayAndDate();

    // Function to set weather icons based on weather description
    function setWeatherIcons(description) {
        var descriptionIcon = document.getElementById('description-icon');
        var temperatureIcon = document.getElementById('temperature-icon');
        var humidityIcon = document.getElementById('humidity-icon');

        // Add appropriate classes to icons based on weather description
        if (description.includes('cloud')) {
            descriptionIcon.classList.add('mdi', 'mdi-cloud');
        } else if (description.includes('rain')) {
            descriptionIcon.classList.add('mdi', 'mdi-weather-rainy');
        } else if (description.includes('sun') || description.includes('clear')) {
            descriptionIcon.classList.add('mdi', 'mdi-weather-sunny');
        } else if (description.includes('snow')) {
            descriptionIcon.classList.add('mdi', 'mdi-weather-snowy');
        }

        // Add appropriate classes to icons based on temperature
        if (@Model.Temperature <10) {
            temperatureIcon.classList.add('mdi', 'mdi-thermometer-minus');
        } else if (@Model.Temperature > 30) {
            temperatureIcon.classList.add('mdi', 'mdi-thermometer-plus');
        }

        // Add appropriate classes to icons based on humidity
        if (@Model.Humidity <50) {
            humidityIcon.classList.add('mdi', 'mdi-water-off');
        } else {
            humidityIcon.classList.add('mdi', 'mdi-water');
        }
    }

    // Call the function to set weather icons based on weather description
    setWeatherIcons('@Model.Description');
</script>

